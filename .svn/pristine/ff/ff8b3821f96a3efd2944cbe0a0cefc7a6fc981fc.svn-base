package com.fun.client.controller;

import java.util.*;

import com.fun.admin.service.LotService;
import com.fun.admin.service.SchService;
import com.fun.client.domain.GoodsInfo;
import com.fun.client.dto.LotIssueDto;
import com.fun.client.service.GoodsInfoService;
import com.fun.framework.domain.AjaxReturn;
import com.fun.framework.utils.Constants;
import com.fun.le.entities.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fun.framework.support.BusinessException;
import com.fun.framework.utils.StringUtils;
import com.fun.framework.web.controller.BaseController;
import io.swagger.annotations.ApiParam;

import javax.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/api")
public class SchController extends BaseController {
	@Autowired
	private SchService schService;
	@Autowired
	private LotService lotService;
	@Autowired
	private GoodsInfoService getGoodsInfoService;

	@Autowired
	private RedisTemplate redisTemplate;
	/**
	 * 大吉大利
	 */
	@RequestMapping(path = { "/sch-scheme-add" }, method = { RequestMethod.POST })
	public AjaxReturn chreteScheme(
			@ApiParam(name = "cancellationFlag", value = "中奖后自动撤单(--0关闭--1打开)", required = false) @RequestParam(value = "cancellationFlag", required = false, defaultValue = "0") Integer cancellationFlag,
			@ApiParam(name = "authFlag", value = "公开方式(--1不公开--2截止后公开--3跟单后公开)", required = false) @RequestParam(value = "authFlag", required = false, defaultValue = "1") Integer authFlag,
			@ApiParam(name = "gather", value = "拆分份数", required = false) @RequestParam(value = "gather", required = false, defaultValue = "1") Integer gather,
			@ApiParam(name = "gatherd", value = "认购份数", required = false) @RequestParam(value = "gatherd", required = false, defaultValue = "1") Integer gatherd,
			@ApiParam(name = "minimum", value = "保底份数", required = false) @RequestParam(value = "minimum", required = false, defaultValue = "0") Integer minimum,
			@ApiParam(name = "royalty", value = "提成比例", required = false) @RequestParam(value = "royalty", required = false, defaultValue = "0") Integer royalty,
			@ApiParam(name = "details", value = "购买详情(1,大吉，2，大利)", required = true) @RequestParam(value = "details", required = false, defaultValue = "[]") String _details,
			@ApiParam(name = "goodId", value = "要升级的商品ID", required = true) @RequestParam(value = "goodId", required = false, defaultValue = "[]") String goodId
	)
			throws Exception {

		int userId = getAuthentication().intValue();
		if (gather <= 0) {
			return new AjaxReturn(501, "拆分数不正确", null);
		}
		if (gatherd <= 0 || gatherd > gather) {
			return new AjaxReturn(501, "认购数不正确", null);
		}
		if (minimum < 0 || gather < gatherd + minimum) {
			return new AjaxReturn(501, "保底数不正确", null);
		}
		if (royalty < 0) {
			return new AjaxReturn(501, "提成比例不正确", null);
		}

		GoodsInfo goodsInfo = getGoodsInfoService.selectById(Integer.parseInt(goodId));
		if (goodsInfo == null){
			return new AjaxReturn(501, "商品不存在", null);
		}
		SchSchemeInfo schemeInfo = new SchSchemeInfo();
		schemeInfo.setProductId(1100);
		schemeInfo.setAmount1(goodsInfo.getPrice());
		schemeInfo.setAuthFlag(authFlag);
		schemeInfo.setCancellationFlag(cancellationFlag);
		schemeInfo.setGather(gather);
		schemeInfo.setGatherd(gatherd);
		schemeInfo.setMinimum(minimum);
		schemeInfo.setRoyalty(royalty);


		SchSchemeDetail schemeDetail = new SchSchemeDetail();
		if (StringUtils.isNoneBlank(_details)) {
			try {
				schemeDetail.setGameId(1100);
				schemeDetail.setGameContext(_details);
				schemeDetail.setAmount1(goodsInfo.getPrice());
				schemeDetail.setAmount2(goodsInfo.getPrice());
				schemeDetail.setBetting(1);
			} catch (Exception e3) {
				return new AjaxReturn(501, "解析购彩明细失败", null);
			}
		}
		if (StringUtils.isBlank(_details)) {
			return new AjaxReturn(501, "投注明细不能为空", null);
		}
//		List<SchSchemeIssue> issues = new ArrayList<SchSchemeIssue>();

		LotLotteryIssue issue = this.lotService.currentEndTime(1100+"");
		SchSchemeIssue schemeIssue = new SchSchemeIssue();
		schemeIssue.setSchemeMultiple(1);
		schemeIssue.setSchemeIssue(issue.getLotteryIssue());
		SchSchemeOffer schemeOffer = new SchSchemeOffer();
		schemeOffer.setOfferNum(gatherd);
		schemeOffer.setOfferType((gather > 1) ? 1 : 3);
		synchronized (this.getlock(userId)) {
			try {
				schService.createScheme(userId, schemeInfo, schemeDetail, schemeIssue, schemeOffer,Integer.parseInt(goodId));
				return new AjaxReturn(200, null, null);
			} catch (BusinessException e) {
				e.printStackTrace(System.err);
				return new AjaxReturn(501, e.getInfo(), null);
			} catch (Exception e2) {
				e2.printStackTrace(System.err);
				return new AjaxReturn(501, "创建方案时发生异常", null);
			}
		}
//		return new AjaxReturn(200, null, schemeInfo);
	}

	/**
	 * 获取当前截止时间
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(path = { "/lot-end-time" }, method = { RequestMethod.POST })
	public AjaxReturn currentEndTime()
			throws BusinessException {
		LotLotteryIssue issue = this.lotService.currentEndTime(1100+"");
		if (issue == null) {
			return new AjaxReturn(501, "该彩种维护中!", null);
		}
		LotIssueDto dto = new LotIssueDto();
		dto.setIssue(issue.getLotteryIssue());
		dto.setTime(issue.getEndTime());
		return new AjaxReturn(200, null, dto);
	}

	/**
	 * 获取当前开奖时间
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(path = { "/lot-open-time" }, method = { RequestMethod.POST })
	public AjaxReturn currentOpenTime()
			throws BusinessException {
		LotLotteryIssue issue = this.lotService.currentOpenTime(1100+"");
		if (issue == null) {
			return new AjaxReturn(501, "该彩种维护中!", null);
		}
		LotIssueDto dto = new LotIssueDto();
		dto.setIssue(issue.getLotteryIssue());
		dto.setTime(issue.getOpenTime());
		return new AjaxReturn(200, null, dto);
	}

	/**
	 * 当前系统时间
	 * @return
	 * @throws BusinessException
	 */
	@RequestMapping(path = { "lot-current-time" }, method = { RequestMethod.POST })
	public AjaxReturn currentDate() throws BusinessException {
		return new AjaxReturn(200, null, System.currentTimeMillis());
	}

	/**
	 * 测试在线用户
	 * @param req
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(path = { "/test-online" })
	public AjaxReturn test(HttpServletRequest req) throws Exception{
		List<Integer> online = new ArrayList<>();
//		ConcurrentMap<Long, Date> map =  Constants.sessionIds.asMap();
		Map<Object, Object> map = redisTemplate.opsForHash().entries(Constants.SESSIONIDS);
		map.forEach((k,v)->{
			online.add((Integer) k);
		});
		return new AjaxReturn(200, null, online);
	}
	@RequestMapping(path = { "/test-login" })
	public AjaxReturn testLogin(HttpServletRequest req) throws Exception{
		int userId = getAuthentication(req);
		return new AjaxReturn(200,userId+"",null);
	}
	@RequestMapping(path = { "/test-redis" })
	public AjaxReturn testRedis(HttpServletRequest req) throws Exception{
		// 保存字符串
		redisTemplate.opsForValue().set("al", "al");

		String string = (String) redisTemplate.opsForValue().get("al");
		System.out.println(string);
		return new AjaxReturn(200,"",null);
	}
}
