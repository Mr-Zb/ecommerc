package com.fun.client.controller;

import com.alibaba.fastjson.JSON;
import com.fun.admin.service.SequenceService;
import com.fun.client.domain.FinRechargeLog;
import com.fun.client.domain.IntegralOrderInfo;
import com.fun.client.domain.MemTeam;
import com.fun.client.domain.MemUserInfo;
import com.fun.client.service.*;
import com.fun.framework.domain.AjaxReturn;
import com.fun.framework.domain.Pagination;
import com.fun.framework.utils.*;
import com.fun.framework.web.controller.BaseController;
import com.fun.framework.web.dto.QueryDto;
import com.fun.le.entities.FinCapitalLog;
import com.fun.le.entities.SysPropSetting;
import com.fun.le.service.FinCapitalLogService;
import com.fun.le.service.SysPropSettingService;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import springfox.documentation.annotations.ApiIgnore;
import org.springframework.security.core.session.SessionInformation;

import javax.servlet.http.HttpServletRequest;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.TimeUnit;

@RestController
@RequestMapping("/api")
public class MemUserInfoController extends BaseController {

    @Autowired
    private MemUserInfoService memUserInfoService;
    @Autowired
    private FinCapitalLogService finCapitalLogService;
    @Autowired
    private IntegralOrderInfoService integralOrderInfoService;
    @Autowired
    private GoodsOrderInfoService goodsOrderInfoService;
    @Autowired
    private FinService finService;
    @Autowired
    private SequenceService sequenceService;
    @Autowired
    private FinRechargeLogService rechargeLogService;
    @Autowired(required = false)
    private SessionRegistry sessionRegistry;
    private @Autowired
    SysPropSettingService sysPropSettingService;

    private final OkHttpClient client = new OkHttpClient.Builder().connectTimeout(3, TimeUnit.SECONDS).readTimeout(60, TimeUnit.SECONDS).retryOnConnectionFailure(false).build();
    private final String header = "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1";

    private final Cache<String, Date> locker = Caffeine.newBuilder().expireAfterWrite(120, TimeUnit.SECONDS).initialCapacity(10000).maximumSize(100000).build();
    private final Cache<String, String> vcode = Caffeine.newBuilder().expireAfterWrite(600, TimeUnit.SECONDS).initialCapacity(10000).maximumSize(100000).build();

    /**
     * 查询個人信息及团队金额
     *
     * @return
     */
    @ApiIgnore
    @RequestMapping(path = {"mem-and-money"}, method = {RequestMethod.POST})
    public AjaxReturn selectMemAndMoney(Integer userId) throws Exception {
        // int userId = getAuthentication().intValue();
//        long start = System.currentTimeMillis();
        MemUserInfo list = memUserInfoService.selectById(userId);
        MemUserInfo list1 = this.memUserInfoService.selectById(list.getAgentId().intValue());
        List<SysPropSetting> settings = this.sysPropSettingService.selectDataVersion();
//        Double finCapitalLog = list.getCapital1();//用户余额
//        int countUserIntegral = list.getUserScore();//用户积分余额
        Map<String, Object> map = new HashMap<>();
//        map.put("money", finCapitalLog);
//        map.put("integral", countUserIntegral);
        map.put("mem", list);
        map.put("dataVersion",settings);
        if (list.getUserType() == 20) {
            Map<String, Object> map2 = new HashMap<>();
            double rebate = list.getRebate();//反水比例
            double extension = list.getExtension();//推广比例

//            Double finCapitalLog4;//升级金额(下级中奖金额)
//            Double sumPromotionMoney = 0.0;//大吉大利
//            Double sumRedPacketMoney = 0.0;//拆红包
//            List<MemUserInfo> memUserInfos2 = this.memUserInfoService.countSubordinateUser(userId);//查询下级用户
//            for (int i = 0; i < memUserInfos2.size(); i++) {
//                Double promotionMoney = this.goodsOrderInfoService.selectPromotionMoney(memUserInfos2.get(i).getPkId());
//                Double redPacketMoney = this.goodsOrderInfoService.selectRedPacketMoney(memUserInfos2.get(i).getPkId());
//                sumPromotionMoney += promotionMoney;
//                sumRedPacketMoney += redPacketMoney;
//            }
//
//            finCapitalLog4 = (sumPromotionMoney + sumRedPacketMoney) * extension;//升级金额(下级中奖金额)=大吉大利+拆红包

            double rebate2 = 0.0; //返佣金额
            double promotion = 0.0;//中奖佣金

            double extension2 = 0.0;//推广盈利

//            Double finCapitalLog1 = memUserInfoService.teamCapital1(userId);//团队余额
//            Double finCapitalLog2 = memUserInfoService.teamCapital4(userId);//团队充值
            Double finCapitalLog3 = memUserInfoService.teamCapital5(userId);//促销金额
            Double finCapitalLog4 = memUserInfoService.teamCapital6(userId);//团队中奖
//            Double finCapitalLog5 = memUserInfoService.teamCapital7(userId);//团队提现

            /**
             * 测试数据
             */
            List<MemUserInfo> testTeamMoney = this.memUserInfoService.testTeamMoney(userId);
            rebate2 = finCapitalLog3 * rebate;//返佣金额=返水比例*团队促销金额
            if (list1.getAgentId() == 0) {//最上级代理，则按1.9作为代理用户的推广比例
                promotion = finCapitalLog4 * (1.9 - extension);//中奖佣金 = 团队中奖金额*(1.9-推广比例)
            } else {
                double extension3 = list1.getExtension();//具有上级代理的推广比例
                promotion = finCapitalLog4 * (extension3 - extension);
            }
            extension2 = rebate2 + promotion;//推广盈利=返佣金额+中奖佣金
            //test
//            map2.put("teamMoney", finCapitalLog1);
//            map2.put("teamRecharge", finCapitalLog2);
//            map2.put("teamWithdraw", finCapitalLog5);
//            map2.put("teamPromotion", finCapitalLog4);//升级金额
//            map2.put("teamUpgrade", finCapitalLog3);//促销金额

//            map2.put("extension", extension2);
            map.put("testTeamMoney",testTeamMoney);
            map.put("extension", extension2);
//            map.put("group", map2);
//            System.out.println(System.currentTimeMillis() - start);
            return new AjaxReturn(null, null, map);
        }
        return new AjaxReturn(null, null, map);
    }

    /**
     * 查询用户收货地址
     *
     * @return
     * @throws Exception
     */
    @ApiIgnore
    @RequestMapping(path = {"user-address-list"}, method = {RequestMethod.GET, RequestMethod.POST})
    public MemUserInfo slectUserAddress() throws Exception {
        int userId = getAuthentication().intValue();
        return this.memUserInfoService.selectUserAddress(userId);
    }

    //修改用户收货地址
    @ApiIgnore
    @RequestMapping(path = {"update-address"}, method = {RequestMethod.POST})
    public AjaxReturn updateMemAddress(MemUserInfo memUserInfo) throws Exception {
        int userId = getAuthentication().intValue();
        memUserInfo.setPkId(userId);
        this.memUserInfoService.updateMemAddress(memUserInfo);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 修改密码
     *
     * @param
     * @return
     */
    @ApiIgnore
    @RequestMapping(path = {"mem-user-info-update-pwd"}, method = {RequestMethod.POST})
    public AjaxReturn updatePwd(String pwd1, String pwd2) throws Exception {
        int userId = getAuthentication().intValue();
        if (StringUtils.isBlank(pwd1)) {
            return new AjaxReturn(501, "原密码不合法", null);
        }
        if (!StringUtils.isUserPwd(pwd2)) {
            return new AjaxReturn(501, "新密码不合法", null);
        }

        this.memUserInfoService.updatePwdById(userId,pwd1, pwd2);
        return new AjaxReturn(200, "密码修改成功！", null);

    }

    /**
     * 注册
     *
     * @param memUserInfo
     * @return.
     */
    @ApiIgnore
    @RequestMapping(path = {"mem-register"}, method = {RequestMethod.POST})
    public AjaxReturn add(MemUserInfo memUserInfo) {
        MemUserInfo memUserInfo1;
        if (StringUtils.isBlank(memUserInfo.getCampaign())) {
            return new AjaxReturn(500, "邀请码不能为空！", null);
        } else {
            memUserInfo1 = memUserInfoService.selectById(Integer.parseInt(memUserInfo.getCampaign()));
            if (memUserInfo1 == null) {
                return new AjaxReturn(500, "上级代理不存在！", null);
            }
        }
        memUserInfo.setLoginName(memUserInfo.getLoginName());
        memUserInfo.setAgentId(memUserInfo1.getPkId().longValue());
        memUserInfo.setCreateTime(new Date());
        memUserInfo.setAgentFullId(memUserInfo1.getAgentFullId() + String.format("&%d&", memUserInfo1.getPkId()));
        memUserInfo.setAgentFullName(memUserInfo1.getAgentFullName() + String.format("&%s&", memUserInfo1.getLoginName()));
        memUserInfo.setAgentName(memUserInfo1.getLoginName());
        memUserInfo.setBankAccount("");
        memUserInfo.setBankName("");
        memUserInfo.setBankAccountName("");
        memUserInfo.setUserScore(0);
        memUserInfo.setUserType(50);
        memUserInfo.setAuthCodes("[101]");
        memUserInfo.setBankSubName("");
        memUserInfo.setCampaign(memUserInfo1.getPkId() + "");
        memUserInfo.setLoginPwd(DigestUtils.md5Hex(memUserInfo.getLoginPwd()));
        memUserInfo.setBankLocked(0);
        memUserInfo.setEnableFlag(1);
        memUserInfo.setRebate(0.05);
        String code = memUserInfo.getVcode();
        if (StringUtils.isBlank(code)) {
            return new AjaxReturn(500, "验证码不能为空！", null);
        }
        if (!code.equals(vcode.getIfPresent(memUserInfo.getLoginName()))) {
            return new AjaxReturn(500, "验证码不正确！", null);
        }
        if (this.memUserInfoService.selectLoginName(memUserInfo.getLoginName()) != null) {
            return new AjaxReturn(500, "该用户已存在", null);
        }
        this.memUserInfoService.insert(memUserInfo);
        //将推广用户设置成代理
        if (memUserInfo1.getUserType() > 20) {
            memUserInfo1.setUserType(20);
            memUserInfo1.setPkId(Integer.parseInt(memUserInfo.getCampaign()));
            this.memUserInfoService.updateMemAddress(memUserInfo1);
        }
        locker.invalidate(memUserInfo.getLoginName());
        vcode.invalidate(memUserInfo.getLoginName());
        return new AjaxReturn(200, null, null);
    }

    /**
     * 查询银行卡信息
     *
     * @param memUserInfo
     * @return
     * @throws Exception
     */
    @ApiIgnore
    @RequestMapping(path = {"select-bank-info"}, method = {RequestMethod.POST})
    public MemUserInfo slectBankInfo(MemUserInfo memUserInfo) throws Exception {
        int userId = getAuthentication().intValue();
        return this.memUserInfoService.selcectBankInfo(memUserInfo, userId);
    }

    /**
     * 获取手机验证码
     *
     * @param loginName
     * @return
     */
    @ApiIgnore
    @RequestMapping(path = {"user-verification"}, method = {RequestMethod.POST})
    public AjaxReturn getVerification(String loginName) {
        Date ifPresent = locker.getIfPresent(loginName);
        if (ifPresent != null) {
            if (new Date().getTime() - ifPresent.getTime() < 60000) {
                return new AjaxReturn(500, "验证码已发送，请勿重复发送！", null);
            }
        }
        Request request;
        Response response = null;
        String code;
        try {
            code = StringUtils.randomStr(6);
            String context = "【嗨购】请输入验证码" + code + "完成验证。";
            StringBuffer sb = new StringBuffer();
            sb.append("http://www.bjhx106.com/sms.aspx");
            sb.append("?action=send");
            sb.append("&userid=" + "716");
            sb.append("&account=" + "zdyzm01");
            sb.append("&password=" + "zdyzm123");
            sb.append("&mobile=" + loginName);
            sb.append("&content=" + context);
            request = new Request.Builder().url(sb.toString()).addHeader("User-Agent", header).build();
            response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                locker.put(loginName, new Date());
                vcode.put(loginName, code);
            }
        } catch (Exception e) {
            return new AjaxReturn(500, "获取验证码失败，请重试！", null);
        } finally {
            if (response != null) {
                response.close();
            }
        }
        return new AjaxReturn(200, null, null);
    }


    /**
     * 忘记密码
     *
     * @return
     * @throws Exception
     */
    @ApiIgnore
    @RequestMapping(path = {"user-forget-password"}, method = {RequestMethod.POST})
    public AjaxReturn forgetPassword(String loginName, String Vcode, String password) {
        if (!Vcode.equals(vcode.getIfPresent(loginName))) {
            return new AjaxReturn(500, "验证码不正确！", null);
        }
        if (this.memUserInfoService.selectLoginName(loginName) == null) {
            return new AjaxReturn(500, "该用户不在！", null);
        }
        if (!StringUtils.isUserPwd(password)) {
            return new AjaxReturn(500, "新密码不合法", null);
        }
        memUserInfoService.updatePwdByLoginName(loginName, DigestUtils.md5Hex(password));
        locker.invalidate(loginName);
        vcode.invalidate(loginName);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 更新数据
     *
     * @param memUserInfo
     * @return
     */
    @ApiIgnore
    @RequestMapping(path = {"mem-user-info-update"}, method = {RequestMethod.POST})
    public AjaxReturn update(MemUserInfo memUserInfo) throws Exception {
        int userId = getAuthentication().intValue();
        this.memUserInfoService.update(memUserInfo, userId);
        return new AjaxReturn(200, null, null);
    }

    //新增银行卡数据
    @ApiIgnore
    @RequestMapping(path = {"mem-user-info-bank"}, method = {RequestMethod.POST})
    public AjaxReturn addBank(MemUserInfo memUserInfo) throws Exception {
        int userId = getAuthentication().intValue();
        this.memUserInfoService.addBankInfo(memUserInfo, userId);
        return new AjaxReturn(200, null, null);
    }

//    /**
//     * 查询用户的上级代理
//     */
//    @ApiIgnore
//    @RequestMapping(path = {"select-mem-agent"}, method = {RequestMethod.POST})
//    public AjaxReturn selectUserAgent() throws Exception {
//        HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
//        int userId = getAuthentication(request).intValue();
//        MemUserInfo list = this.memUserInfoService.selectUserAgent(userId);
//        Map<String, Object> map = new HashMap<>();
//        map.put("list", list);
//        return new AjaxReturn(200, null, map);
//    }
//
//    //获取下级用户ID
//    @ApiIgnore
//    @RequestMapping(path = {"select-subordinate"}, method = {RequestMethod.POST})
//    public AjaxReturn countSubordinateUser() throws Exception {
//        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
//        int userId = getAuthentication(request).intValue();
//        List<FinCapitalLog> list = this.finCapitalLogService.countSubordinateUser(userId);
//        List<Object> list1 = new ArrayList<>();
//        list1.add(list.get(0).getPkId());
//        System.out.println(list1.get(0));
//        return new AjaxReturn(200, null, list);
//    }

    //我的推广列表
    @ApiIgnore
    @RequestMapping(path = {"select-subordinate-info"}, method = {RequestMethod.POST})
    public AjaxReturn selectSubordinateInfo() throws Exception {
        int userId = getAuthentication().intValue();
        List<MemUserInfo> list = memUserInfoService.selectSubordinate(userId);//获取用户下级id
        List<MemTeam> list3 = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            MemTeam memTeam1 = new MemTeam();
            memTeam1.setMemberName(list.get(i).getLoginName());
            memTeam1.setRebate(list.get(i).getRebate());
            memTeam1.setAmount1(list.get(i).getCapital1());
            memTeam1.setAmount2(list.get(i).getCapital5());
            list3.add(memTeam1);
        }
        return new AjaxReturn(200, null, list3);
    }

    /**
     * 根据条件查询用户列表信息
     *
     * @return
     * @throws Exception
     */
    @ApiIgnore
    @RequestMapping(path = {"select-all-user-list"}, method = {RequestMethod.POST})
    public AjaxReturn selectAllMem(MemUserInfo memUserInfo, QueryDto queryDto) {
        List<Long> online = new ArrayList<>();
//        ConcurrentMap<Long, Date> map =  Constants.sessionIds.asMap();
//        map.forEach((k,v)->{
//            online.add(k);
//        });
        long startTime = new Date().getTime();
        Pagination<MemUserInfo> pagination = memUserInfoService.selectAll(memUserInfo, queryDto, online);
        System.out.println(new Date().getTime() - startTime);
        Pagination<MemUserInfo> pagination1 = memUserInfoService.selectAll(memUserInfo, queryDto, online);
        System.out.println(new Date().getTime() - startTime);
        return pagination;
    }

    /**
     * 后台新增用户
     *
     * @param userInfo
     * @param request
     * @return
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-ordinary-add"}, method = {RequestMethod.POST})
    public AjaxReturn add(MemUserInfo userInfo, HttpServletRequest request) {
        if (!StringUtils.isUserName(userInfo.getLoginName()) || NumberUtils.toInt(userInfo.getLoginName()) > 0) {
            return new AjaxReturn(501, "用户名不能是纯数字", null);
        }
        MemUserInfo memUserInfo = memUserInfoService.selectLoginName(userInfo.getAgentName());
        if (memUserInfo == null) {
            return new AjaxReturn(500, "上级代理不存在！", null);
        }
        if (this.memUserInfoService.selectLoginName(userInfo.getLoginName()) != null) {
            return new AjaxReturn(500, "该用户已存在", null);
        }
        //操作人ID
        //int userId = this.getAuthentication().intValue();
        //操作人IP
        //String ip = RequestUtils.getIp(request);
        userInfo.setUserType(50);
        userInfo.setLoginName(userInfo.getLoginName());
        userInfo.setAgentId(1L);
        userInfo.setCreateTime(new Date());
        userInfo.setAgentFullId(memUserInfo.getAgentFullId() + String.format("&%d&", memUserInfo.getPkId()));
        userInfo.setAgentFullName(memUserInfo.getAgentFullName() + String.format("&%s&", memUserInfo.getLoginName()));
        userInfo.setAgentName(memUserInfo.getLoginName());
        userInfo.setBankAccount("");
        userInfo.setBankName("");
        userInfo.setBankAccountName("");
        userInfo.setUserScore(0);
        userInfo.setAuthCodes("");
        userInfo.setBankSubName("");
        userInfo.setCampaign("");
        userInfo.setLoginPwd(DigestUtils.md5Hex(userInfo.getLoginPwd()));
        userInfo.setBankLocked(0);
        userInfo.setEnableFlag(1);
        userInfo.setUserType(Integer.valueOf(50));
        userInfo.setExtension(memUserInfo.getExtension() - 0.5);
        this.memUserInfoService.insert(userInfo);
        MemUserInfo userInfoByName = memUserInfoService.selectLoginName(userInfo.getLoginName());
        this.finService.addCapitalLog(userInfoByName.getPkId(), 33, BigDecimal.valueOf(userInfo.getCapital1()).abs().doubleValue(), "",
                "后台新增设置金额");
        return new AjaxReturn(200, null, null);
    }

    /**
     * 重置密码
     *
     * @param memId
     * @return
     * @throws Exception
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-pwd-reset"}, method = {RequestMethod.POST})
    public AjaxReturn pwdReset(Integer memId) {
        MemUserInfo memUserInfo = memUserInfoService.selectById(memId);
        memUserInfoService.updatePwdByLoginName(memUserInfo.getLoginName(), DigestUtils.md5Hex("admin123456"));
        return new AjaxReturn(200, null, null);
    }

    /**
     * 解绑信息
     *
     * @param memId
     * @return
     */
    @ApiIgnore
    // @Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-unbundling"}, method = {RequestMethod.POST})
    public AjaxReturn unbundling(Integer memId) {
        this.memUserInfoService.unbundling(memId);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 帐变
     *
     * @param memId
     * @param type
     * @param amount
     * @param remark
     * @return
     * @throws Exception
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-account-change-by-type"}, method = {RequestMethod.POST})
    public AjaxReturn add(Integer memId, Integer type, Double amount, String remark, Integer amountType) throws Exception {
        if (amountType == 0) {
            amount = (-amount);
        }
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        int userId = this.getAuthentication(request);
        if (type == 1) {
            MemUserInfo userInfo = this.memUserInfoService.selectById(memId);
            double _amount = userInfo.getCapital1();
            String orderNo = this.sequenceService.generate("T");
            FinRechargeLog finRechargeLog = new FinRechargeLog();
            finRechargeLog.setMemberId(userInfo.getPkId());
            finRechargeLog.setMemberName(userInfo.getLoginName());
            finRechargeLog.setAgentId(userInfo.getAgentId().intValue());
            finRechargeLog.setAgentName(userInfo.getAgentName());
            finRechargeLog.setAgentFullId(userInfo.getAgentFullId());
            finRechargeLog.setAgentFullName(userInfo.getAgentFullName());
            finRechargeLog.setRechargeAmount1(amount);
            finRechargeLog.setRechargeAmount2(amount + _amount);
            finRechargeLog.setRechargeAccount("---");
            finRechargeLog.setRechargeFrom("管理员手工帐变");
            finRechargeLog.setRechargeNo(orderNo);
            finRechargeLog.setOrderNo(orderNo);
            finRechargeLog.setRemark("手工帐变，" + remark);
            finRechargeLog.setRechargeState(1);
            this.rechargeLogService.insert(userId, finRechargeLog);
            this.finService.addCapitalLog(memId, 33, BigDecimal.valueOf(amount).doubleValue(),
                    orderNo, remark);
            return new AjaxReturn(200, null, null);
        } else {
            Double countUserIntegral = this.integralOrderInfoService.countUserIntegral(userId);//用户积分余额
            if (countUserIntegral + amount < 0) {
                return new AjaxReturn(500, "积分不能为负！", null);
            }
            //TODO加减积分
            String orderNo = this.sequenceService.generate("Z");
            IntegralOrderInfo integralOrderInfo = new IntegralOrderInfo();
            integralOrderInfo.setCreateTime(new Date());
            integralOrderInfo.setGoodId(0);
            integralOrderInfo.setAmount(amount);
            integralOrderInfo.setUserId(userId);
            integralOrderInfo.setOrderState(5);
            integralOrderInfo.setGoodName("");
            integralOrderInfo.setOrderNo(orderNo);
            this.integralOrderInfoService.insert(integralOrderInfo, userId);//插入积分订单记录
            this.memUserInfoService.updateUserIntegral(memId, countUserIntegral + amount);
        }
        return new AjaxReturn(200, null, null);
    }

    /**
     * 新增管理员
     *
     * @param memUserInfo
     * @param permissions
     * @return
     * @throws Exception
     */
    @ApiIgnore
    //
    // @Secure(any = { "le:mem:manager:list" })
    @RequestMapping(path = {"mem-manager-add"}, method = {RequestMethod.POST})
    public AjaxReturn addManager(MemUserInfo memUserInfo, @RequestParam(value = "permissions", required = false) String[] permissions) {
        synchronized (this) {
            MemUserInfo userInfo = this.memUserInfoService.selectLoginName(memUserInfo.getLoginName());
            if (userInfo != null) {
                return new AjaxReturn(Integer.valueOf(501), "管理账户已存在", null);
            }
            MemUserInfo userInfo1 = new MemUserInfo();
            userInfo1.setCreateTime(new Date());
            userInfo1.setLoginName(memUserInfo.getLoginName());
            userInfo1.setLoginPwd(DigestUtils.md5Hex(memUserInfo.getLoginPwd()));
            userInfo1.setAgentFullId("");
            userInfo1.setAgentFullName("");
            userInfo1.setAgentId(0L);
            userInfo1.setAgentName("");
            userInfo1.setCampaign("");
            userInfo1.setBankAccountName("");
            userInfo1.setOnlineFlag(Integer.valueOf(0));
            userInfo1.setBankAccount("");
            userInfo1.setBankSubName("");
            userInfo1.setUserType(Integer.valueOf(10));
            userInfo1.setBankName("");
            userInfo1.setBankLocked(Integer.valueOf(0));
            userInfo1.setMemberReward(Integer.valueOf(0));
            userInfo1.setUserScore(Integer.valueOf(0));
            userInfo1.setCapital1(Double.valueOf(0.0D));
            userInfo1.setCapital2(Double.valueOf(0.0D));
            userInfo1.setCapital3(Double.valueOf(0.0D));
            userInfo1.setCapital4(Double.valueOf(0.0D));
            userInfo1.setCapital5(Double.valueOf(0.0D));
            userInfo1.setCapital6(Double.valueOf(0.0D));
            userInfo1.setCapital7(Double.valueOf(0.0D));
            userInfo1.setCapital8(Double.valueOf(0.0D));
            userInfo1.setRemark(memUserInfo.getRemark());
            userInfo1.setEnableFlag(1);
            userInfo1.setExtension(0.0);
            if (StringUtils.isNotBlank(memUserInfo.getRemark())) {
                userInfo1.setRemark(memUserInfo.getRemark());
            }
            if (permissions == null) {
                permissions = new String[0];
            }
            userInfo1.setAuthCodes(JSON.toJSONString(permissions));
            this.memUserInfoService.insert(userInfo1);
        }
        return new AjaxReturn(200, null, null);
    }

    /**
     * 修改管理员权限
     *
     * @param memId
     * @param permissions
     * @return
     * @throws Exception
     */
    @ApiIgnore
    //@Secure(any = { "le:mem:manager:list" })
    @RequestMapping(path = {"api-mem-manager-save"}, method = {RequestMethod.POST})
    public AjaxReturn saveManager(Integer memId,
                                  @RequestParam(value = "permissions", required = false) String[] permissions) throws Exception {
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        int userId = getAuthentication(request).intValue();
        synchronized (this) {
            MemUserInfo userInfo = this.memUserInfoService.selectById(memId);
            if ((userInfo == null) || (userInfo.getUserType().intValue() != 10)
                    || (userInfo.getPkId().intValue() == userId)) {
                return new AjaxReturn(Integer.valueOf(501), "不能修改管理员权限", null);
            }
            if (permissions == null) {
                permissions = new String[0];
            }
            MemUserInfo active = new MemUserInfo();
            active.setPkId(memId);
            active.setAuthCodes(JSON.toJSONString(permissions));
            this.memUserInfoService.updateAuthCodes(active);
        }
        return new AjaxReturn(200, null, null);
    }

    //删除用户
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"api-mem-delete"}, method = {RequestMethod.POST})
    public AjaxReturn deleteMem(Integer memId) {
        this.memUserInfoService.deleteById(memId);
        return new AjaxReturn(200, null, null);
    }

    //查询管理员列表
    @ApiIgnore
    //@Secure(any = { "le:mem:manager:list" })
    @RequestMapping(path = {"mem-manager-list"}, method = {RequestMethod.POST})
    public AjaxReturn listManagers(QueryDto queryDto) throws Exception {
        List<Long> online = new ArrayList<>();
        /*ConcurrentMap<Long, Date> map =  Constants.sessionIds.asMap();
        map.forEach((k,v)->{
            online.add(k);
        });*/
        //在线用户ID集合
        Pagination<MemUserInfo> memUserInfoPagination = this.memUserInfoService.listManagers(queryDto, online);
        return memUserInfoPagination;
    }


    /**
     * 代理列表
     *
     * @param memUserInfo
     * @param queryDto
     * @return
     * @throws Exception
     */
    @ApiIgnore
    @RequestMapping(path = {"mem-agent-list"}, method = {RequestMethod.POST})
    public AjaxReturn listAgentMember(MemUserInfo memUserInfo, QueryDto queryDto) {
        List<Long> online = new ArrayList<>();
       /* ConcurrentMap<Long, Date> map =  Constants.sessionIds.asMap();
        map.forEach((k,v)->{
            online.add(k);
        });*/
        Pagination<MemUserInfo> pagination = this.memUserInfoService.listAgentMember(memUserInfo,
                queryDto, online);
        return pagination;
    }

    /**
     * 修改代理返佣比例
     *
     * @param memUserInfo
     * @return
     * @throws Exception
     */
    @ApiIgnore
    @RequestMapping(path = {"mem-update-rebate"}, method = {RequestMethod.POST})
    public AjaxReturn updateRebate(MemUserInfo memUserInfo) {
        this.memUserInfoService.updateRebate(memUserInfo);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 添加代理
     *
     * @param memUserInfo
     * @return
     */
    @ApiIgnore
    //@Secure(any = { "le:mem:manager:list" })
    @RequestMapping(path = {"mem-agent-add"}, method = {RequestMethod.POST})
    public AjaxReturn addAgent(MemUserInfo memUserInfo) {
        synchronized (this) {
            MemUserInfo agentInfo = null;
            MemUserInfo userInfo = this.memUserInfoService.selectLoginName(memUserInfo.getLoginName());
            if (userInfo != null) {
                return new AjaxReturn(Integer.valueOf(501), "代理账户已存在", null);
            }
            if (StringUtils.isNotBlank(memUserInfo.getAgentName())) {
                agentInfo = this.memUserInfoService.selectLoginName(memUserInfo.getAgentName());
                if (agentInfo == null) {
                    return new AjaxReturn(Integer.valueOf(501), "上级代理不存在", null);
                } else if (agentInfo.getUserType() != 20) {
                    return new AjaxReturn(Integer.valueOf(501), "此帐号不是代理帐号", null);
                }
            } else {
                agentInfo = this.memUserInfoService.selectById(1);
            }
            userInfo = new MemUserInfo();
            userInfo.setLoginName(memUserInfo.getLoginName());
            userInfo.setLoginPwd(DigestUtils.md5Hex(memUserInfo.getLoginPwd()));
            userInfo.setAgentFullId(StringUtils.isNotBlank(agentInfo.getAgentFullId())
                    ? String.format("%s&%d&", new Object[]{agentInfo.getAgentFullId(), agentInfo.getPkId()})
                    : String.format("&%d&", new Object[]{agentInfo.getPkId()}));
            userInfo.setAgentFullName(StringUtils.isNotBlank(agentInfo.getAgentFullName())
                    ? String.format("%s&%s&", new Object[]{agentInfo.getAgentFullName(), agentInfo.getLoginName()})
                    : String.format("&%s&", new Object[]{agentInfo.getLoginName()}));
            userInfo.setAgentId(agentInfo.getPkId().longValue());
            userInfo.setAgentName(agentInfo.getLoginName());
            userInfo.setBankAccountName("");
            userInfo.setOnlineFlag(Integer.valueOf(0));
            userInfo.setBankAccount("");
            userInfo.setBankSubName("");
            userInfo.setUserType(Integer.valueOf(20));
            userInfo.setBankName("");
            userInfo.setBankLocked(Integer.valueOf(0));
            userInfo.setMemberReward(Integer.valueOf(0));
            userInfo.setUserScore(Integer.valueOf(0));
            userInfo.setCapital1(Double.valueOf(0.0D));
            userInfo.setCapital2(Double.valueOf(0.0D));
            userInfo.setCapital3(Double.valueOf(0.0D));
            userInfo.setCapital4(Double.valueOf(0.0D));
            userInfo.setCapital5(Double.valueOf(0.0D));
            userInfo.setCapital6(Double.valueOf(0.0D));
            userInfo.setCapital7(Double.valueOf(0.0D));
            userInfo.setCapital8(Double.valueOf(0.0D));
            userInfo.setRemark("");
            userInfo.setEnableFlag(1);
            userInfo.setRebate(memUserInfo.getRebate());
            userInfo.setExtension(agentInfo.getExtension() - 0.05);
            if (StringUtils.isNotBlank(memUserInfo.getRemark())) {
                userInfo.setRemark(memUserInfo.getRemark());
            }
            this.memUserInfoService.insert(userInfo);
        }
        return new AjaxReturn(200, null, null);
    }

    /**
     * 锁定用户帐号
     *
     * @param memId
     * @return
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-lock"}, method = {RequestMethod.POST})
    public AjaxReturn lock(Integer memId) {
        this.memUserInfoService.updateEnableFlag(0, memId);
        this.sessionRegistry.getAllPrincipals().forEach(principal -> {
            if (NumberUtils.toInt(((User) principal).getUsername()) == memId) {
                List<SessionInformation> informations = this.sessionRegistry.getAllSessions(principal, false);
                if (CollectionUtils.isNotEmpty(informations)) {
                    informations.forEach(information -> information.expireNow());
                }
            }
            return;
        });
        return new AjaxReturn(200, null, null);
    }

    /**
     * 解锁用户帐号
     *
     * @param memId
     * @return
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-unlock"}, method = {RequestMethod.POST})
    public AjaxReturn unlock(Integer memId) {
        this.memUserInfoService.updateEnableFlag(1, memId);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 修改备注信息
     *
     * @param memUserInfo
     * @return
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-update-remark"}, method = {RequestMethod.POST})
    public AjaxReturn updateRemark(MemUserInfo memUserInfo) {
        if (StringUtils.isBlank(memUserInfo.getRemark())) {
            return new AjaxReturn(500, "请输入备注！", null);
        }
        this.memUserInfoService.updateRemark(memUserInfo);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 修改推广标识
     *
     * @param memUserInfo
     * @return
     */
    @ApiIgnore
    //@Secure(has={"le:admin"})
    @RequestMapping(path = {"mem-update-campaign"}, method = {RequestMethod.POST})
    public AjaxReturn updateCampaign(MemUserInfo memUserInfo) {
        if (StringUtils.isBlank(memUserInfo.getCampaign())) {
            return new AjaxReturn(500, "请输入推广标识！", null);
        }
        this.memUserInfoService.updateCampaign(memUserInfo);
        return new AjaxReturn(200, null, null);
    }

    //用户设置推广比例
    @ApiIgnore
    @RequestMapping(path = {"user-update-extension"}, method = {RequestMethod.POST})
    public AjaxReturn updateExtension(double extension) throws Exception {
        int userId = getAuthentication().intValue();
        MemUserInfo memUserInfo = this.memUserInfoService.selectById(userId);
        if (memUserInfo.getExtension() > 0.0) {
            return new AjaxReturn(500, null, null);
        }
        if (extension >= 1.1 && extension <= 1.9) {
            this.memUserInfoService.updateExtension(extension, userId);
            return new AjaxReturn(200, "设置成功", null);
        }
        return new AjaxReturn(500, "设置失败", null);
    }

    /*查询用户设置推广比例*/
    @ApiIgnore
    @RequestMapping(path = {"select-user-extension"}, method = {RequestMethod.POST})
    public AjaxReturn selectExtension() throws Exception {
        int userId = getAuthentication().intValue();
        MemUserInfo memUserInfo = this.memUserInfoService.selectById(userId);
        return new AjaxReturn(200, null, memUserInfo.getExtension());
    }

    /**
     * 修改用户赔率
     */
    @ApiIgnore
    @RequestMapping(path = {"update-user-extension"}, method = {RequestMethod.POST})
    public AjaxReturn updateUserExtension(Double extension, Integer userId) {
        if (extension >= 1.1 && extension <= 1.9) {
            this.memUserInfoService.updateExtension(extension, userId);
            return new AjaxReturn(200, "修改成功", null);
        } else {
            return new AjaxReturn(500, "修改失败", null);
        }
    }

}
