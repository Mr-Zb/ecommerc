package com.fun.api.web.controller;

import java.util.*;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;

import com.fun.client.domain.MemUserInfo;
import com.fun.framework.utils.*;
import com.fun.le.entities.SysAuthMenu;
import com.fun.le.service.SysAuthMenuService;
import org.apache.commons.lang3.Validate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.fun.api.service.LoginService;
import com.fun.framework.domain.AjaxReturn;
import com.github.benmanes.caffeine.cache.Cache;
import com.fun.framework.web.controller.BaseController;
import com.github.benmanes.caffeine.cache.Caffeine;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/api")
public class LoginController extends BaseController {
	private @Autowired LoginService loginService;
	@Autowired
	private SessionRegistry sessionRegistry;
	@Autowired
	private SysAuthMenuService sysAuthMenuService;
	private final Cache<String, Integer> cache = Caffeine.newBuilder().expireAfterWrite(60, TimeUnit.SECONDS)
			.initialCapacity(10000).maximumSize(100000).build();

	@RequestMapping(path = { "/login" }, method = { RequestMethod.GET, RequestMethod.POST })
	public AjaxReturn login(//
			@RequestParam(value = "u") String userName, //
			@RequestParam(value = "p") String userPwd, //
//			@RequestParam(value = "v", required = false, defaultValue = "") String valdate, //
			HttpServletRequest request//
	) throws Exception {
		log.debug(">>login");
		Validate.isTrue(StringUtils.isNotBlank(userName), "msg:用户名格式不正确");
		Validate.isTrue(StringUtils.isNotBlank(userPwd), "msg:密码格式不正确");
		// 获取账户信息
		MemUserInfo memUserInfo = loginService.findByUserName(userName);
		Validate.isTrue(memUserInfo != null, "msg:用户名或密码不正确");
		Validate.isTrue(StringUtils.equalsIgnoreCase(memUserInfo.getLoginPwd(), DigestUtils.md5Hex(userPwd)),
				"msg:用户名或密码不正确");

		// 获取权限转换
		Set<GrantedAuthority> authorities = Sets.newLinkedHashSet();
		authorities.add(new SimpleGrantedAuthority("le:authority"));
		//--10管理员--20代理--30超级会员--40测试会员--50普通会员
		if (memUserInfo.getUserType().intValue() == 10)
			authorities.add(new SimpleGrantedAuthority("le:admin"));//管理员
		else if (memUserInfo.getUserType().intValue() == 20)
			authorities.add(new SimpleGrantedAuthority("le:agent"));//代理
		else if (memUserInfo.getUserType().intValue() == 30)
			authorities.add(new SimpleGrantedAuthority("le:supper"));//超级会员
		else if (memUserInfo.getUserType().intValue() == 40)
			authorities.add(new SimpleGrantedAuthority("le:virtual"));//虚拟
		else if (memUserInfo.getUserType().intValue() == 50) {
			authorities.add(new SimpleGrantedAuthority("le:mem"));//普通会员
		}
		List<SysAuthMenu> allsSysAuthMenus = sysAuthMenuService.select(1,new SysAuthMenu());
		if (memUserInfo.getUserType().intValue() == 50){
			Map<Integer,String> resourcesMap = new HashMap<Integer,String>();
			for (SysAuthMenu resource : allsSysAuthMenus) {
				resourcesMap.put(resource.getPkId(), resource.getAuthCode());
			}
			String authCodes = memUserInfo.getAuthCodes();
			if (StringUtils.isNotBlank(authCodes)) {
				List<Integer> list = JSON.parseArray(authCodes, Integer.class);
				for (Integer pkId : list) {
					authorities.add(new SimpleGrantedAuthority(resourcesMap.getOrDefault(pkId, "le:authority")));
				}
			}
		}

		// 登录到系统
		UserDetails userDetails = new User(String.valueOf(memUserInfo.getPkId()), memUserInfo.getLoginPwd(), authorities);
		PreAuthenticatedAuthenticationToken token = new PreAuthenticatedAuthenticationToken(userDetails,
				userDetails.getPassword(), userDetails.getAuthorities());
		token.setDetails(new WebAuthenticationDetails(request));
		SecurityContextHolder.getContext().setAuthentication(token);

		Map<String, Object> map = Maps.newHashMap();
		map.put("userName", memUserInfo.getLoginName());
		map.put("userType", memUserInfo.getUserType());
		map.put("userId",memUserInfo.getPkId());
		//管理员拼接权限
		if (memUserInfo.getUserType() ==10){
			List<String> authCodes = JSON.parseArray(memUserInfo.getAuthCodes(), String.class);
			for (int i=0;i<allsSysAuthMenus.size();i++){
				for (int j=0;j<authCodes.size();j++){
					if ((allsSysAuthMenus.get(i).getPkId()+"").equals(authCodes.get(j))){
						allsSysAuthMenus.get(i).setAuth(true);
					}
				}
			}
			for (int i=0;i<allsSysAuthMenus.size();i++){
				map.put(allsSysAuthMenus.get(i).getMenuLink(),allsSysAuthMenus.get(i).getAuth());
			}
		}

		String sessionId = request.getSession().getId();
//		log.info("sessionId_"+request.getSession().getId()+","+memUserInfo.getPkId());
//		request.getSession().setAttribute("sessionId_"+request.getSession().getId(),memUserInfo.getPkId());
		Constants.sessions.put(memUserInfo.getPkId().longValue(), sessionId);
		//前台判断是否在线
		if (memUserInfo.getUserType() == 10){
			//后台token判断
			String tokenStr = StringUtils.systemUuid();
			map.put("token",tokenStr);
			Constants.tokens.put(tokenStr,memUserInfo.getPkId().longValue());
		}else {
			Constants.sessionIds.put(memUserInfo.getPkId().longValue(),DateFormatUtils.parse("yyyy-MM-dd HH:mm:ss",new Date()));
		}
		request.getSession().setMaxInactiveInterval(0);//设置session永久有效，方便getAuthentication()获取用户值
		log.debug("<<login");
		return new AjaxReturn(200, null, map);
	}

	@RequestMapping(path = { "/valid" }, method = { RequestMethod.GET, RequestMethod.POST })
	public AjaxReturn valid(@RequestParam(value = "token") String token) throws Exception{
		Long userId = Constants.tokens.getIfPresent(token);
		if (userId !=null && userId >0){
			return new AjaxReturn(200, null, null);
		}else {
			return new AjaxReturn(501, "token失效", null);
		}
	}

}