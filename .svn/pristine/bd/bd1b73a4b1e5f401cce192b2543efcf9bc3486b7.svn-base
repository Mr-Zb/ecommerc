package com.fun.client.service;

import java.util.Date;
import java.util.List;

import com.fun.client.domain.MemLoginLog;
import com.fun.client.repository.MemLoginLogMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fun.framework.support.BusinessException;

@Service
public class MemLoginLogService{

	@Autowired
	private MemLoginLogMapper memLoginLogMapper;

	public Integer insert(Integer userId, MemLoginLog memLoginLog) throws BusinessException {
		memLoginLog.setCreateTime(new Date());
		memLoginLog.setCreateUser(userId);
		memLoginLog.setUpdateTime(new Date());
		memLoginLog.setUpdateUser(userId);
		memLoginLog.setDataVersion(Integer.valueOf(1));
		return this.memLoginLogMapper.insert(memLoginLog);
	}

	public Integer insert(Integer userId, List<MemLoginLog> memLoginLogs) throws BusinessException {
		for (MemLoginLog memLoginLog : memLoginLogs) {
			memLoginLog.setCreateTime(new Date());
			memLoginLog.setCreateUser(userId);
			memLoginLog.setUpdateTime(new Date());
			memLoginLog.setUpdateUser(userId);
			memLoginLog.setDataVersion(Integer.valueOf(1));
		}
		return this.memLoginLogMapper.insertBatch(memLoginLogs);
	}

	public Integer update(Integer userId, MemLoginLog memLoginLog, MemLoginLog where) throws BusinessException {
		memLoginLog.setUpdateTime(new Date());
		memLoginLog.setUpdateUser(userId);
		return this.memLoginLogMapper.update(memLoginLog, where);
	}

	public Integer updateById(Integer userId, MemLoginLog memLoginLog, Integer memLoginLogId) throws BusinessException {
		memLoginLog.setUpdateTime(new Date());
		memLoginLog.setUpdateUser(userId);
		return this.memLoginLogMapper.updateById(memLoginLog, memLoginLogId);
	}

	public Integer updateActive(Integer userId, MemLoginLog memLoginLog, MemLoginLog where) throws BusinessException {
		memLoginLog.setUpdateTime(new Date());
		memLoginLog.setUpdateUser(userId);
		return this.memLoginLogMapper.updateActive(memLoginLog, where);
	}

	public Integer updateActiveById(Integer userId, MemLoginLog memLoginLog, Integer memLoginLogId)
			throws BusinessException {
		memLoginLog.setUpdateTime(new Date());
		memLoginLog.setUpdateUser(userId);
		return this.memLoginLogMapper.updateActiveById(memLoginLog, memLoginLogId);
	}

	public List<MemLoginLog> select(Integer userId, MemLoginLog memLoginLog) throws BusinessException {
		return this.memLoginLogMapper.select(memLoginLog);
	}

	public MemLoginLog selectById(Integer userId, Integer memLoginLogId) throws BusinessException {
		return this.memLoginLogMapper.selectById(memLoginLogId);
	}

	public Integer delete(Integer userId, MemLoginLog where) throws BusinessException {
		return this.memLoginLogMapper.delete(where);
	}

	public Integer deleteById(Integer userId, Integer memLoginLogId) throws BusinessException {
		return this.memLoginLogMapper.deleteById(memLoginLogId);
	}
}
