package com.fun.client.controller;

import com.fun.client.domain.FinRechargeLog;
import com.fun.client.domain.FinWithdrawLog;
import com.fun.client.service.FinRechargeLogService;
import com.fun.client.service.FinWithdrawLogService;
import com.fun.client.service.MemFinService;
import com.fun.client.service.MemUserInfoService;
import com.fun.framework.domain.AjaxReturn;
import com.fun.framework.support.BusinessException;
import com.fun.framework.web.dto.QueryDto;
import com.fun.framework.web.support.annotation.Secure;
import com.fun.le.entities.FinCapitalLog;
import com.fun.le.service.FinCapitalLogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.fun.framework.web.controller.BaseController;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import java.util.List;

@RestController
@RequestMapping("/api")
public class FinanceController extends BaseController {

    @Autowired(required = false)
    private MemFinService memFinService;
    private @Autowired
    FinRechargeLogService finRechargeLogService;
    private @Autowired
    FinWithdrawLogService finWithdrawLogService;
    private @Autowired
    FinCapitalLogService finCapitalLogService;
    private @Autowired
    MemUserInfoService memUserInfoService;

    @ApiOperation(value = "提款申请", notes = "提款申请", code = 200, produces = "application/json")
    @RequestMapping(path = {"/api-mem-fin-draw-applier"}, method = {RequestMethod.POST})
    public synchronized AjaxReturn drawApplier(
            @ApiParam(name = "amount", value = "申请金额", required = true) @RequestParam(value = "amount", required = true, defaultValue = "") Double amount,
            @ApiParam(name = "bankPwd", value = "提现密码", required = true) @RequestParam(value = "bankPwd", required = true, defaultValue = "") String bankPwd)
            throws Exception {
        int userId = getAuthentication().intValue();
        this.memFinService.drawApplier(Integer.valueOf(userId), bankPwd, amount);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 充值明细
     *
     * @param finRechargeLog
     * @param queryDto
     * @return
     */
    @ApiIgnore
    //@Secure(has = {"le:fina:recharge:list"})
    @RequestMapping(path = {"fin-recharge-list"})
    public AjaxReturn selectFinRechargeList(FinRechargeLog finRechargeLog, QueryDto queryDto) {
        if (finRechargeLog == null) {
            finRechargeLog = new FinRechargeLog();
        }
        if (queryDto == null) {
            queryDto = new QueryDto();
        }
        return this.finRechargeLogService.selectFinRechargeList(finRechargeLog, queryDto);
    }

    /**
     * 充值确认
     */
    @ApiIgnore
    @RequestMapping(path = {"fin-recharge-check"})
    public AjaxReturn rechargeCheck(Integer rechargeState, Integer pkId, HttpServletRequest request) throws Exception {
        int userId = getAuthentication(request);
        FinRechargeLog finRechargeLog = this.finRechargeLogService.selectById(userId, pkId);
        finRechargeLog.setRechargeState(rechargeState);
        if (rechargeState == 1) {
            finRechargeLog.setRemark("已到账");
            //插入资金记录
            FinCapitalLog finCapitalLog = new FinCapitalLog();
            finCapitalLog.setAgentFullId(finRechargeLog.getAgentFullId());
            finCapitalLog.setAgentFullName(finRechargeLog.getAgentFullName());
            finCapitalLog.setAgentId(finRechargeLog.getAgentId());
            finCapitalLog.setAgentName(finRechargeLog.getAgentName());
            finCapitalLog.setCapitalAmount1(finRechargeLog.getRechargeAmount1());
            finCapitalLog.setCapitalAmount2(finRechargeLog.getRechargeAmount2());
            finCapitalLog.setCapitalType(11);
            finCapitalLog.setCreateTime(new Date());
            finCapitalLog.setCreateUser(userId);
            finCapitalLog.setDataVersion(1);
            finCapitalLog.setMemberId(finRechargeLog.getMemberId().longValue());
            finCapitalLog.setMemberName(finRechargeLog.getMemberName());
            finCapitalLog.setOrderId(finRechargeLog.getPkId());
            finCapitalLog.setOrderNo(finRechargeLog.getOrderNo());
            finCapitalLog.setRemark("用户充值");
            finCapitalLog.setUpdateTime(new Date());
            finCapitalLog.setUpdateUser(userId);
            this.finCapitalLogService.insert(finCapitalLog);
            this.memUserInfoService.updateUserAmount1(finRechargeLog.getMemberId(), finRechargeLog.getRechargeAmount2());//更新用户余额
        }else{
            finRechargeLog.setRemark("未到账");
        }
        this.finRechargeLogService.rechargeCheck(rechargeState, pkId);
        return new AjaxReturn(200, null, null);
    }

    /**
     * 提款明细
     */
    @ApiIgnore
    //@Secure(has = {"le:fina:draw:list"})
    @RequestMapping(path = {"fin-draw-list"})
    public AjaxReturn select(FinWithdrawLog finWithdrawLog, QueryDto queryDto) throws BusinessException {
        if (finWithdrawLog == null) {
            finWithdrawLog = new FinWithdrawLog();
        }
        if (queryDto == null) {
            queryDto = new QueryDto();
        }
        return this.finWithdrawLogService.select(finWithdrawLog, queryDto);
    }

    /**
     * 提款审核
     */
    @ApiIgnore
    @RequestMapping(path = {"user-draw-check"})
    public AjaxReturn userDrawCheck(Integer id, HttpServletRequest request, Integer withdrawState, String remark) throws Exception {
        int userId = getAuthentication(request);
        FinWithdrawLog finWithdrawLog = this.finWithdrawLogService.selectById(userId, id);
        finWithdrawLog.setWithdrawState(withdrawState);
        if (finWithdrawLog.getWithdrawState() == 1) {
            finWithdrawLog.setRemark("已完成");
        } else {
            finWithdrawLog.setRemark("已拒绝：" + remark);
        }
        this.finWithdrawLogService.updateById(userId, finWithdrawLog, id);
        if (finWithdrawLog.getWithdrawState() == 1) {
            FinCapitalLog finCapitalLog = new FinCapitalLog();
            finCapitalLog.setAgentFullId(finWithdrawLog.getAgentFullId());
            finCapitalLog.setAgentFullName(finWithdrawLog.getAgentFullName());
            finCapitalLog.setAgentId(finWithdrawLog.getAgentId());
            finCapitalLog.setAgentName(finWithdrawLog.getAgentName());
            finCapitalLog.setCapitalAmount1(-finWithdrawLog.getWithdrawAmount2());
            finCapitalLog.setCapitalAmount2(finWithdrawLog.getWithdrawAmount1() - finWithdrawLog.getWithdrawAmount2());
            finCapitalLog.setCapitalType(12);
            finCapitalLog.setCreateTime(new Date());
            finCapitalLog.setCreateUser(userId);
            finCapitalLog.setDataVersion(1);
            finCapitalLog.setMemberId(finWithdrawLog.getMemberId().longValue());
            finCapitalLog.setMemberName(finWithdrawLog.getMemberName());
            finCapitalLog.setOrderId(finWithdrawLog.getPkId());
            finCapitalLog.setOrderNo(finWithdrawLog.getOrderNo());
            finCapitalLog.setRemark("用户提款");
            finCapitalLog.setUpdateTime(new Date());
            finCapitalLog.setUpdateUser(userId);
            this.finCapitalLogService.insert(finCapitalLog);
            this.memUserInfoService.updateUserAmount1(finWithdrawLog.getMemberId(), finCapitalLog.getCapitalAmount2());//更新用户余额
            return new AjaxReturn(200, null, null);
        }
        return new AjaxReturn(200, null, null);
    }
}
